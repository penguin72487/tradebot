//@version=6
strategy(title = 'Open Close Cross Strategy R5.1 revised by Penguin', shorttitle = 'OCC Strategy R5.1', overlay = true, pyramiding = 0, default_qty_type = strategy.percent_of_equity, default_qty_value = 100, calc_on_every_tick = false, initial_capital = 1000)

startYear = input(2023, "Start Year")
startMonth = input(3, "Start Month")
startDay = input(15, "Start Day")
endYear = year(timenow)
endMonth = month(timenow)
endDay = dayofmonth(timenow)
startTime = timestamp(startYear, startMonth, startDay, 00, 00)
endTime = timestamp(endYear, endMonth, endDay, 23, 59)
timelock = input(bool(0), "Time lock")

// 判斷當前條是否在指定的時間範圍內
inDateRange = time >= startTime and time <= endTime or (not timelock)

// === INPUTS ===
basisType = input.string(defval = 'SMMA', title = 'MA Type: ', options = ['SMA', 'EMA', 'DEMA', 'TEMA', 'WMA', 'VWMA', 'SMMA', 'HullMA', 'LSMA', 'ALMA', 'SSMA', 'TMA'])
basisLen = input.int(defval = 8, title = 'MA Period', minval = 1)
offsetSigma = input.int(defval = 6, title = 'Offset for LSMA / Sigma for ALMA', minval = 0)
offsetALMA = input.float(defval = 0.85, title = 'Offset for ALMA', minval = 0, step = 0.01)
delayOffset = input.int(defval = 0, title = 'Delay Open/Close MA (Forces Non-Repainting)', minval = 0, step = 1)

// === BASE FUNCTIONS ===
variant(type, src, len, offSig, offALMA) =>
    v1 = ta.sma(src, len) // Simple
    v2 = ta.ema(src, len) // Exponential
    v3 = 2 * v2 - ta.ema(v2, len) // Double Exponential
    v4 = 3 * (v2 - ta.ema(v2, len)) + ta.ema(ta.ema(v2, len), len) // Triple Exponential
    v5 = ta.wma(src, len) // Weighted
    v6 = ta.vwma(src, len) // Volume Weighted
    v7 = 0.0
    sma_1 = ta.sma(src, len) // Smoothed
    v7 := na(v7[1]) ? sma_1 : (v7[1] * (len - 1) + src) / len
    v8 = ta.wma(2 * ta.wma(src, len / 2) - ta.wma(src, len), math.round(math.sqrt(len))) // Hull
    v9 = ta.linreg(src, len, offSig) // Least Squares
    v10 = ta.alma(src, len, offALMA, offSig) // Arnaud Legoux
    v11 = ta.sma(v1, len) // Triangular (extreme smooth)
    a1 = math.exp(-1.414 * 3.14159 / len)
    b1 = 2 * a1 * math.cos(1.414 * 3.14159 / len)
    c2 = b1
    c3 = -a1 * a1
    c1 = 1 - c2 - c3
    v12 = 0.0
    v12 := c1 * (src + nz(src[1])) / 2 + c2 * nz(v12[1]) + c3 * nz(v12[2])
    type == 'EMA' ? v2 : type == 'DEMA' ? v3 : type == 'TEMA' ? v4 : type == 'WMA' ? v5 : type == 'VWMA' ? v6 : type == 'SMMA' ? v7 : type == 'HullMA' ? v8 : type == 'LSMA' ? v9 : type == 'ALMA' ? v10 : type == 'TMA' ? v11 : type == 'SSMA' ? v12 : v1

// === SERIES SETUP ===
closeSeries = variant(basisType, close[delayOffset], basisLen, offsetSigma, offsetALMA)
openSeries = variant(basisType, open[delayOffset], basisLen, offsetSigma, offsetALMA)

// === PLOTTING ===
// 僅使用當前時間框架資料
plot(closeSeries, color=color.blue, title="Close Series MA")
plot(openSeries, color=color.red, title="Open Series MA")
// === PLOTTING ===

// === ALERT conditions
closeSeriesAlt = closeSeries
openSeriesAlt = openSeries
//
// === ALERT conditions
xlong = ta.crossover(closeSeriesAlt, openSeriesAlt)
xshort = ta.crossunder(closeSeriesAlt, openSeriesAlt)
longCond = xlong // alternative: longCond[1]? false : (xlong or xlong[1]) and close>closeSeriesAlt and close>=open
shortCond = xshort // alternative: shortCond[1]? false : (xshort or xshort[1]) and close<closeSeriesAlt and close<=open
// === /ALERT conditions.

// === STRATEGY ===
// stop loss
slPoints = input.int(defval = 0, title = 'Initial Stop Loss Points (zero to disable)', minval = 0)
tpPoints = input.int(defval = 0, title = 'Initial Target Profit Points (zero for disable)', minval = 0)
// Include bar limiting algorithm
ebar = input.int(defval = 10000000, title = 'Number of Bars for Back Testing', minval = 0)
dummy = input(false, title = '- SET to ZERO for Daily or Longer Timeframes')
//
// Calculate how many mars since last bar
tdays = (timenow - time) / 60000.0 // number of minutes since last bar
tdays := timeframe.ismonthly ? tdays / 1440.0 / 5.0 / 4.3 / timeframe.multiplier : timeframe.isweekly ? tdays / 1440.0 / 5.0 / timeframe.multiplier : timeframe.isdaily ? tdays / 1440.0 / timeframe.multiplier : tdays / timeframe.multiplier // number of bars since last bar
//
//set up exit parameters
TP = tpPoints > 0 ? tpPoints : na
SL = slPoints > 0 ? slPoints : na

// Make sure we are within the bar range, Set up entries and exit conditions
if (ebar == 0 or tdays <= ebar) and inDateRange
    if longCond == true
        strategy.entry('long', strategy.long)
    if shortCond == true 
        strategy.entry('short', strategy.short)
    if shortCond == true
        strategy.close('long')
    if longCond == true
        strategy.close('short')
    strategy.exit('XL', from_entry = 'long', profit = TP, loss = SL)
    strategy.exit('XS', from_entry = 'short', profit = TP, loss = SL)


// === /STRATEGY ===
// eof
